module top_module (
    input clk,
    input aresetn,    // Asynchronous active-low reset
    input x,
    output z ); 

    `define S1 2'b00
    `define S2 2'b01
    `define S3 2'b10

    reg[1:0] state;
    reg z_out;
    assign z = z_out;
    
    always_comb begin
        if(state === `S3 && x === 1'b1) z_out = 1'b1;
        else z_out = 1'b0;
    end
    
    always_ff@(posedge clk or negedge aresetn) begin
        if(~aresetn) state <= `S1;
        else begin
            case({x, state})
                {1'b1, `S1} : state <= `S2;
                {1'b0, `S2} : state <= `S3;
                {1'b1, `S3} : state <= `S2;
                {1'b0, `S3} : state <= `S1;
            endcase
        end
    end
endmodule
